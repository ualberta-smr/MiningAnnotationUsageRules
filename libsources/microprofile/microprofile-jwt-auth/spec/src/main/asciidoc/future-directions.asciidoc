//
// Copyright (c) 2016-2018 Eclipse Microprofile Contributors:
// Red Hat
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

[[resource_access]]
## Future Directions

Not all considerations discussed during the specification process make it into the
specification.  This section serves as an abridged version for the purposes of soliciting
feedback and interest.  By convention we will leave items in the Future Direction for at most two revisions.

### `resource_access` claim

In future versions of the API we would like to address service specific group claims. The `resource_access`
claim originally targeted for the 1.0 release of the specification has been postponed as additional work to determine
the format of the claim key as well as how these claims would be surface through the standard Java EE APIs needs
more work than the 1.0 release timeline will allow.

For reference, a somewhat related extension to the OAuth 2.0 spec
https://tools.ietf.org/html/draft-campbell-oauth-resource-indicators-02[Resource Indicators for OAuth 2.0]
has not gained much traction. The key point it makes that seems relevant to our investigation is that the service
specific grants most likely need to be specified using URIs for the service endpoints. How these endpoints map to
deployment virtual hosts and partial, wildcard, etc. URIs needs to be determined.

### `roles` claim

A `roles` claim was considered in addition to the `groups` claim that made it into the final
specification.  The `groups` claim is intended to be mapped to specific roles on the target resource server.  The `roles`
claim was intended to explicitly state roles inside the JWT that would not be subject to any mappings and are made
available to directly to the application for `@RolesAllowed` and similar RBAC checks.  The roles in the JWT should
be exposed to the app in addition to any roles that result from group-to-role mapping provided by the target resource server.
The intended JWT datatype for `roles` should be a JSON string array.

Though a `roles` claim is not required, implementations that support it and applications that use it should do so as
detailed in this section to ensure alignment for any future standardization.

### `aud` claim

The `aud` claim defined in RFC 7519 section 4.1.3 was considered for addition.  The intended JWT datatype for
`aud` should be a JSON string array or a single string as defined in RFC 7519.

Though an `aud` claim is not required, implementations that support it and applications that use it should do so as
detailed in this section to ensure alignment for any future standardization.

### Enabling/Disabling Claim Requirements

We discussed adding configuration settings to disable/enable the requirements for
claims such as the `iss` claim, but could not decide on the format for such
configuration given the time constraints of the 1.1 release. We will revisit
this issue in the next release.

### `classpath:` URL Scheme

The option to have a built-in `classpath:` URL Scheme was discussed with the intended
benefit of providing some way to explicitly state a Public Key file is inside the archive
and to remove potential a similarly named file existed on disk.

For the moment this was deemed an edge-case that could be solved with a custom URL Scheme
and consensus that this would add to the complexity of the specification.  In practice,
this may be very useful so those who find themselves with this scenario are encouraged
to contact the MicroProfile discussion lists.

### Expiration tolerance

Relaxing or potentially ignoring the expiration time of a JWT was discussed and deemed
an attractive option for future standardization.  It was omitted in efforts to keep the
first revision of the configuration as simple as possible.

Users who find themselves with this need are encouraged to both request support from their
respective implementation and to detail their use case the MicroProfile discussion lists,
so any future standardization work accounts for all scenarios.

### Passing JWTs as Cookies

Semantics for passing JWTs via HTTP `Cookie` headers instead of the HTTP `Authorization` header
were discussed and deemed a valuable addition for interoperability purposes.

It is likely to be a future recommendation that MicroProfile JWT implementation supporting the
transport of MP-JWT tokens using cookies SHOULD recognize the cookie name `Bearer`, and the cookie value format being the JWS Compact Serialization as described in section 7.1 of https://www.rfc-editor.org/rfc/rfc7515.txt[JSON Web Signature (RFC-7515)].

There are a number of security considerations when using cookies to transfer security information such as tokens in
cookies. Issues related to CSRF, XSS, and storage need to be considered. The following links present material on these issues:

* https://stormpath.com/blog/where-to-store-your-jwts-cookies-vs-html5-web-storage[Cookie Storage]
* https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)[XSS]
* https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)[CSRF]

The motivation for using `Bearer` as the Cookie name is to establish a pattern of using the `Authorization`
scheme as the cookie name.  Bearer token example would look as follows:

 - `Authorization: Bearer as14efgscd31qrewtadg`
 - `Cookie: Bearer=as14efgscd31qrewtadg`

Basic auth would look as follows:

 - `Authorization: Basic gasdqwe198abg313ffd`
 - `Cookie: Basic=gasdqwe198abg313ffd`

