//
// Copyright (c) 2020 Contributors to the Eclipse Foundation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
[[mutations]]
=== Mutations

While queries are intended for clients to read data, mutations are intended to modify data. Mutations may create new
entities or update or delete existing entities. 

==== API Annotation
Like queries, mutation methods must be in a class annotated with the `@GraphQLApi` annotation.

Mutation methods are annotated with `@Mutation`.  
The name of the mutation is specified in the value of the annotation or is generated from the method name if no annotation value is provided.

Mutations generally require arguments (parameters) in order to determine which entity to modify/delete or the data
necessary to create a new entity, etc. These arguments are the parameters of the mutation method and should (not mandatory) be annotated
with `@Name`.  The `@Name` annotation's value is used to specify the name of the argument. The argument name
will be used in the generated schema. Arguments can be GraphQL scalars, enums or more complex input types (for more information
on input types, see <<types>>).

==== Basic POJO Examples

.Create Example
[source,java,numbered]
----
@Mutation
public SuperHero createNewHero(@Name("hero") SuperHero newHero) 
    throws DuplicateSuperHeroException {

    heroDB.addHero(newHero);
    return heroDB.getHero(newHero.getName());
}
----

.Delete Example
[source,java,numbered]
----
@Mutation
public SuperHero removeHero(@Name("hero") String heroName)
    throws UnknownHeroException {

    SuperHero removedHero = heroDB.removeHero(heroName);
    if (removedHero == null) {
        throw new UnknownHeroException(heroName);
    }
    return removedHero;
    }
----

.Update Example
[source,java,numbered]
----
@Mutation
public SuperHero addNewPowerToHero(@Name("hero") SuperHero hero,
                                   @Name("newPower") String newPower)
                                   throws UnknownHeroException {

    SuperHero heroFromDB = heroDB.getHero(newHero.getName());
    if (heroFromDB == null) {
        throw new UnknownHeroException(hero.getName());
    }
    heroFromDB.getSuperPowers().add(newPower);
    return heroFromDB;
}
----

Note that generic types other than subtypes of `java.util.Collection` (such as `java.util.List` or `java.util.Set`) are
not allowed to be specified as mutation return types. Implementations may allow additional types (such as
`java.util.Map`), but the behavior for these return types are undefined.

==== Names

The name of a mutation in the schema is obtained using the following order:

* if the method is annotated with a `@Mutation` annotation containing a non-empty String for it's value, that String
value is used as the mutation name.
* if the method is annotated with a `@Name` annotation containing a non-empty String for it's value, that String value
is used as the mutation name.
* if the method is annotated with a `@JsonbProperty` annotation containing a non-empty String for it's value, that
String value is used as the mutation name.
* if no other name can be determined, the Java method name is used as the mutation name. (with the set removed if the method
name matches the rules for a setter. e.g. `^set[A-Z].*`)

Note that it is considered a deployment error if more than one mutation method has the same name with the same
arguments.

==== Description

As with Queries, Mutations may be documented with descriptions in the schema by adding a `@Description` annotation with documentation text as the
annotation value to the mutation method. See the example in the Query section for more details.

==== Void Mutations

Like query methods, mutation methods are expected to return some value, thus it is considered a deployment error for a
method with a `void` return type to be annotated with `@Mutation`. If a void method is annotated with the `@Mutation`
annotation, the implementation must prevent the application from starting and should provide a log message indicating
that this is not allowed.