//
// Copyright (c) 2020 Contributors to the Eclipse Foundation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

[[non-nullable_fields]]
===== Non-nullable fields

The GraphQL specification states that fields may be marked as non-nullable - the field's type is marked with an
exclamation point to indicate that null values are not allowed.  Non-nullable fields may be present on types and input
types, providing the client with the proper expectations for providing an input type and that they can expect a non-null
value on the return type. If the client sends a null value for a required (non-nullable) field or sends an entity with
the required (non-nullable) field unspecified, the implementation should respond with a validation error. Likewise, the
implementation should return an error if a null is returned for a required (non-nullable) field from the application
code.

By default all GraphQL fields generated from Java primitive properties (`boolean`, `int`, `double`, etc.) will
automatically be marked as required.  If a Java primitive property has a `@DefaultValue` annotation value, then null is
allowed, but the implementation is expected to convert the value to be the default value specified in the annotation.

By default, all GraphQL fields generated from non-primitive properties will be considered nullable. A user may specify
that a field is required/non-nullable by adding the `@NonNull` annotation. This annotation may be applied to an entity's
getter method, setter method or field. The placement will determine whether it applies to the type, input type or both,
respectively.

Example, placing the annotation on the field: 

[source,java,numbered]
----
public class Item {
    // ...
    @NonNull
    private String name;
    // ....
----

Will result in both the Type and Input to be marked not null (!):

[source,graphql,numbered]
----
input ItemInput {
  name: String!
  #...
}

type Item {
  name: String!
  #...  
}
----

The annotation can also be use to indicate that elements in a collection can not be null, example:

[source,java,numbered]
----
public class SuperHero {
    // ...
    private List<@NonNull String> superPowers;
    // ...
}
----

This indicates that superPowers can be null, but if it's not, then it must only contain non-null entries.

The code above will result in a schema entry like this:

[source,graphql,numbered]
----
type SuperHero {
  superPowers: [String!]
  #...
}

input SuperHeroInput {
  superPowers: [String!]
  #...
}
----

Placing a `@NonNull` on the List can also makes the actual list non null. 

The implementation should ignore a `@NonNull` annotation when it is on the same field or setter method that also
contains `@DefaultValue` annotation, as the "null" value would result in the default value being used.

One drawback to using non-nullable fields is that if there is an error loading a child field, that error could propagate
itself up causing the field to be null - and since this is itself an error condition, the implementation must return
the non-null field error, which means that the implementation would not be able to send partial results for other child
fields.