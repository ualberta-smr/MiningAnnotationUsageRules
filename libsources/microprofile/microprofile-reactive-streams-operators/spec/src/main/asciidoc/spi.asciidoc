//
// Copyright (c) 2018 Contributors to the Eclipse Foundation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

== SPI

The API is responsible for building graphs of stages based on the operators the user invoked.
This is done using builder classes that implement the fluent API that is used to compose the
graph. These builders are obtained using the `ReactiveStreamsFactory` interface, a default
implementation of which exists in the core package.
The static methods of the `ReactiveStreams` class delegate to a service loaded implementation of `ReactiveStreamsFactory`, enabling the core implementation to be replaced.

The stages form an SPI for `ReactiveStreamsEngine` implementations to build into a running stream.
Examples of stages include:

* Map
* Filter
* Elements to publish
* Collect
* Instances of Reactive Streams `Publisher`, `Subscriber` and `Processor`

Each stage has either an inlet, an outlet, or both.
A graph is a sequence of stages, consecutive stages will have an outlet and and inlet so that they can join - a graph that has a stage with no outlet followed by a stage that has an inlet is impossible, for example.
Only the stages at the ends of the graph may have no inlet or outlet, whether these end stages have an inlet or outlet determines the shape of the overall graph.
The API is responsible for ensuring that as graphs are constructed, only graphs that are logically possible are passed to the `ReactiveStreamsEngine` to construct.

The implementation discovery relies on the Java `ServiceLoader` mechanism.
However, for environments not supporting this mechanism, the user can pass custom implementations using the following methods:

* `org.eclipse.microprofile.reactive.streams.operators.core.ReactiveStreamsEngineResolver#setInstance` - to configure the `ReactiveStreamEngine`
* `org.eclipse.microprofile.reactive.streams.operators.spi.ReactiveStreamsFactoryResolver#setInstance` - to configure the `ReactiveStreamsFactory`

These methods must be called before the access to the API and should only be used for integration purpose.
