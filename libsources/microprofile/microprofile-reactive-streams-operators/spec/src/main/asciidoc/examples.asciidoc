//
// Copyright (c) 2018 Contributors to the Eclipse Foundation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

[[reactivestreamsexamples]]
== Reactive Streams Usage Examples

=== Trivial closed graph

This just shows the fluency of the API.
It wouldn't make sense to actually do the below in practice, since the JDK8 streams API itself is better for working with in memory streams.

[source, java]
----
CompletionStage<Optional<Integer>> result = ReactiveStreams
    .fromIterable(() -> IntStream.range(1, 1000).boxed().iterator())
    .filter(i -> (i & 1) == 1)
    .map(i -> i * 2)
    .collect(Collectors.reducing((i, j) -> i + j))
    .run();
----

=== Building a publisher

This shows how common collection types can be converted to a `Publisher` of the elements in the collection.

[source, java]
----
List<MyDomainObject> domainObjects = ...

Publisher<ByteBuffer> publisher = ReactiveStreams
    .fromIterable(domainObjects)
    .buildRs(); <1>
----
<1> The `Rs` suffix indicates the method produces a Reactive Streams `Publisher`.


The above example shows a very simple conversion of a `List` to a `Publisher`, of course other operations can be done on the elements before building the `Publisher`, in this case we go on to transform each object to a line in a CSV file, and then represent it as a stream of bytes.

[source, java]
----
Publisher<ByteBuffer> publisher = ReactiveStreams
    .map(obj -> String.format("%s,%s\n", obj.getField1(), obj.getField2()))
    .map(line -> ByteBuffer.wrap(line.getBytes()))
    .buildRs();
----
A `Publisher` built in this way has its behaviour specified by the Reactive Streams
specification. Most reactive streams implementations enable the detailed control
of further aspects of stream stage behaviour such as fan-out, back pressure policy,
buffer sizes and so on. If you require control of such aspects,
consult your implementation's documentation. One approach
would be to create a single `Processor` using your implementation
library's native API having the detailed behaviour required, subscribe that to
the built `Publisher` and then subscribe downstream stream processing stages
to that.

=== Building a subscriber

This shows building a subscriber for a byte stream, such as for the JDK9 HttpClient API.
It assumes another library has provided a Reactive Streams Processor that parses byte streams into streams of objects.

[source, java]
----
Processor<ByteBuffer, MyDomainObject> parser = createParser();

CompletionSubscriber<ByteBuffer, List<MyDomainObject>> subscriber =
  ReactiveStreams.<ByteBuffer>builder()
    .via(parser)
    .toList()
    .build();

Subscriber<ByteBuffer> subscriber = subscriber; <1>
CompletionStage<List<MyDomainObject>> result = subscriber.getCompletion(); <2>
----
<1> The object can be deconstructed into the `Subscriber` part
<2> The `CompletionStage` can be retrieve using `getCompletion`

As a particular `SubscriberBuilder` may be constructed from a user supplied
reactive streams `Subscriber` and subscribers can only be used once,
care should be taken not to reuse builders where this may
cause subscriber reuse, either for the emitted subscriber
or a subscribing stage, such as a `Processor`,
that is internal to a stream.

=== Building a processor

This shows building a processor, for example, a message library may require processing messages, and then emitting an ACK identifier so that each handled element can be acknowledged as handled.

[source, java]
----
Processor<Message<MyDomainObject>, MessageAck> processor =
    ReactiveStreams.<Message<MyDomainObject>>builder()
      .map(message -> {
        handleDomainObject(message.getMessage());
        return message.getMessageAck();
      })
      .buildRs();
  }
----
The comments above on avoiding inadvertent subscriber reuse are also
relevant to `Processor` objects as these may contain internal subscription
relationships as well as user supplied reactive streams `Processor` objects.

=== Consuming a publisher

A library may provide a Reactive Streams publisher that the application developer needs to consume.
This shows how that can be done.

[source, java]
----
Publisher<ByteBuffer> bytesPublisher = makeRequest();

Processor<ByteBuffer, MyDomainObject> parser = createParser();

CompletionStage<List<MyDomainObject>> result = ReactiveStreams
    .fromPublisher(bytesPublisher)
    .via(parser)
    .toList()
    .run();
----

Even though the MicroProfile Reactive Streams Operators API
can be considered a 'lifted' API. The `parser` object above
is directly embedded in the stream and such cannot be used
to build more than one stream instance.

=== Feeding a subscriber

A library may provide a subscriber to feed a connection.
This shows how that subscriber can be fed.

[source, java]
----
List<MyDomainObject> domainObjects = new ArrayList<>();

Subscriber<ByteBuffer> subscriber = createSubscriber();

CompletionStage<Void> completion = ReactiveStreams
    .fromIterable(domainObjects)
    .map(obj -> String.format("%s,%s\n", obj.getField1(), obj.getField2()))
    .map(line -> ByteBuffer.wrap(line.getBytes()))
    .to(subscriber)
    .run();
----
